<template>
    <view class="zan-actionsheet {{ show ? 'zan-actionsheet--show' : '' }}">
        <view class="mask-class zan-actionsheet__mask" @tap="onMaskClick">
        </view>
        <view class="container-class zan-actionsheet__container">
            <!-- 选项按钮 -->
            <!-- 受限于wepy的功能, 不能使用组件repeat来动态地使用数据, 这里使用wx:for -->
            <button wx:for="{{actions}}" wx:for-index="index" wx:for-item="item" wx:key="{{ index }}-{{ item.name }}" @tap="onBtnClick" data-component-id="{{ componentId }}" data-index="{{ index }}" data-type="{{ item.type }}" open-type="{{ item.openType }}" class="zan-btn zan-actionsheet__btn {{ item.loading ? 'zan-btn--loading' : '' }} {{ item.className }}">
                <view class="zan-actionsheet__btn-content {{ item.loading ? 'zan-actionsheet__btn--loading' : '' }}">
                    <view class="zan-actionsheet__name">{{ item.name }}</view>
                    <view wx:if="{{ item.subname }}" class="zan-actionsheet__subname">
                        {{ item.subname }}
                    </view>
                </view>
            </button>
            <!-- 关闭按钮 -->
            <view wx:if="{{ cancelText }}" class="zan-actionsheet__footer">
                <button class="zan-btn zan-actionsheet__btn" @tap="cancelClick" data-component-id="{{ componentId }}">
                    {{ cancelText }}
                </button>
            </view>
        </view>
    </view>
</template>

<style>
.zan-btn {
    position: relative;
    color: #333;
    background-color: #fff;
    padding-left: 15px;
    padding-right: 15px;
    border-radius: 2px;
    font-size: 16px;
    line-height: 45px;
    height: 45px;
    box-sizing: border-box;
    text-decoration: none;
    text-align: center;
    vertical-align: middle;
    overflow: visible;
}
.zan-btn--group {
    margin-bottom: 10px;
}
.zan-btn::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 200%;
    height: 200%;
    transform: scale(0.5);
    transform-origin: 0 0;
    pointer-events: none;
    box-sizing: border-box;
    border: 0 solid #e5e5e5;
    border-width: 1px;
    border-radius: 4px;
}
.zan-btn--primary {
    color: #fff;
    background-color: #4b0;
}
.zan-btn--primary::after {
    border-color: #0a0;
}
.zan-btn--warn {
    color: #fff;
    background-color: #f85;
}
.zan-btn--warn::after {
    border-color: #f85;
}
.zan-btn--danger {
    color: #fff;
    background-color: #f44;
}
.zan-btn--danger::after {
    border-color: #e33;
}
.zan-btn--small {
    display: inline-block;
    height: 30px;
    line-height: 30px;
    font-size: 12px;
}
.zan-btn--small.zan-btn--group {
    margin-bottom: 0;
    margin-right: 5px;
}
.zan-btn--mini {
    display: inline-block;
    line-height: 21px;
    height: 22px;
    font-size: 10px;
    padding-left: 5px;
    padding-right: 5px;
}
.zan-btn--mini.zan-btn--group {
    margin-bottom: 0;
    margin-right: 5px;
}
.zan-btn--large {
    border-radius: 0;
    border: none;
    line-height: 50px;
    height: 50px;
}
.zan-btn--large.zan-btn--group {
    margin-bottom: 0;
}
.zan-btn--plain.zan-btn {
    background-color: transparent;
}
.zan-btn--plain.zan-btn--primary {
    color: #06bf04;
}
.zan-btn--plain.zan-btn--warn {
    color: #f60;
}
.zan-btn--plain.zan-btn--danger {
    color: #f44;
}
.button-hover {
    opacity: 0.9;
}
.zan-btn--loading {
    color: transparent;
    opacity: 1;
}
.zan-btn--loading::before {
    position: absolute;
    left: 50%;
    top: 50%;
    content: ' ';
    width: 16px;
    height: 16px;
    margin-left: -8px;
    margin-top: -8px;
    border: 3px solid #e5e5e5;
    border-color: #666 #e5e5e5 #e5e5e5 #e5e5e5;
    border-radius: 8px;
    box-sizing: border-box;
    animation: btn-spin 0.6s linear;
    animation-iteration-count: infinite;
}
.zan-btn--danger.zan-btn--loading::before,
.zan-btn--primary.zan-btn--loading::before,
.zan-btn--warn.zan-btn--loading::before {
    border-color: #fff rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1);
}
@keyframes btn-spin {
    0% {
        transform: rotate(0);
    }
    100% {
        transform: rotate(360deg);
    }
}
.zan-btn.zan-btn--disabled {
    color: #999 !important;
    background: #f8f8f8 !important;
    border-color: #e5e5e5 !important;
    cursor: not-allowed !important;
    opacity: 1 !important;
}
.zan-btn.zan-btn--disabled::after {
    border-color: #e5e5e5 !important;
}
.zan-btn--group.zan-btn--last {
    margin-bottom: 0;
    margin-right: 0;
}

.zan-actionsheet {
    background-color: #f8f8f8;
}
.zan-actionsheet__mask {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 10;
    background: rgba(0, 0, 0, 0.7);
    display: none;
}
.zan-actionsheet__container {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    background: #f8f8f8;
    transform: translate3d(0, 50%, 0);
    transform-origin: center;
    transition: all 0.2s ease;
    z-index: 11;
    opacity: 0;
    visibility: hidden;
}
.zan-actionsheet__btn {
    margin-bottom: 0 !important;
}
.zan-actionsheet__footer .zan-actionsheet__btn {
    background: #fff;
}
.zan-actionsheet__btn-content {
    display: flex;
    flex-direction: row;
    justify-content: center;
}
.zan-actionsheet__subname {
    color: #999;
}
.zan-actionsheet__name,
.zan-actionsheet__subname {
    height: 45px;
    line-height: 45px;
}
.zan-actionsheet__btn.zan-btn:last-child::after {
    border-bottom-width: 0;
}
.zan-actionsheet__subname {
    margin-left: 2px;
    font-size: 12px;
}
.zan-actionsheet__footer {
    margin-top: 10px;
}
.zan-actionsheet__btn--loading .zan-actionsheet__subname {
    color: transparent;
}
.zan-actionsheet--show .zan-actionsheet__container {
    opacity: 1;
    transform: translate3d(0, 0, 0);
    visibility: visible;
}
.zan-actionsheet--show .zan-actionsheet__mask {
    display: block;
}
</style>

<script>
import wepy from 'wepy'

export default class Actionsheet extends wepy.component {
    components = {}
    props = {
        show: {
            type: Boolean,
            default: false
        },
        actions: {
            type: Array,
            default: []
        },
        cancelText: {
            type: String,
            default: ''
        },
        actionClick: {
            type: Function,
            default: () => {}
        },
        cancel: {
            type: Function,
            default: () => {}
        },
        cancelWithMask: {
            type: Boolean,
            default: true
        }
    }

    methods = {
        cancelClick: event => {
            this.cancel(event)
        },
        onBtnClick: event => {
            this.actionClick(event)
        },
        onMaskClick: event => {
            if (this.cancelWithMask) {
                this.cancel(event)
            }
        }
    }
}
</script>
