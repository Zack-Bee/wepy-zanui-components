<template>
    <view class="pop pop--center {{ show ? 'pop--show' : '' }}">
        <view class="pop__mask {{ show ? '' : 'pop__mask--hide' }}" bindtap="onMaskClick">
        </view>
        <view class="pop__container">
            <view class="zan-dialog--container">
                <view wx:if="{{ title }}" class="zan-dialog__header">{{ title }}</view>
                <view class="zan-dialog__content {{ title ? 'zan-dialog__content--title' : '' }}">
                    <text>{{ message }}</text>
                </view>
                <view class="zan-dialog__footer {{ buttonsShowVertical ? 'zan-dialog__footer--vertical' : 'zan-dialog__footer--horizon' }}">
                    <block wx:for="{{ buttons }}" wx:key="{{ item.text }}-{{ item.type }}">
                        <button data-type="{{item.type}}" class="{{ index === 0 ? 'zan-dialog__button-inside--first' : 'zan-dialog__button-inside' }} zan-dialog__button custom-class zan-btn {{ inGroup ? 'zan-btn--group' : '' }} {{ isLast ? 'zan-btn--last' : '' }} {{size ? 'zan-btn--'+size : ''}} {{size === 'mini' ? 'zan-btn--plain' : ''}} {{plain ? 'zan-btn--plain' : ''}} {{type ? 'zan-btn--'+type : ''}} {{loading ? 'zan-btn--loading' : ''}} {{disabled ? 'zan-btn--disabled' : ''}}" disabled="{{ disabled }}"
                            bindtap="onButtonClick">
                            <view style="color: {{ item.color || '#333' }}">{{ item.text }}</view>
                        </button>
                    </block>
                </view>
            </view>
        </view>
    </view>
</template>

<style>
/*pop-manager*/
.pop {
    visibility: hidden;
}
.pop--show {
    visibility: visible;
}
.pop__mask {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 10;
    background: rgba(0, 0, 0, 0.7);
    display: none;
}
.pop__mask--hide {
    background: 0 0;
}
.pop__container {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate3d(-50%, -50%, 0);
    transform-origin: center;
    transition: all 0.4s ease;
    z-index: 11;
    opacity: 0;
}
.pop--show .pop__container {
    opacity: 1;
}
.pop--show .pop__mask {
    display: block;
}
.pop--left .pop__container {
    left: 0;
    top: 50%;
    transform: translate3d(-100%, -50%, 0);
}
.pop--show.pop--left .pop__container {
    transform: translate3d(0, -50%, 0);
}
.pop--right .pop__container {
    right: 0;
    top: 50%;
    left: auto;
    transform: translate3d(100%, -50%, 0);
}
.pop--show.pop--right .pop__container {
    transform: translate3d(0, -50%, 0);
}
.pop--bottom .pop__container {
    top: auto;
    left: 50%;
    bottom: 0;
    transform: translate3d(-50%, 100%, 0);
}
.pop--show.pop--bottom .pop__container {
    transform: translate3d(-50%, 0, 0);
}
.pop--top .pop__container {
    top: 0;
    left: 50%;
    transform: translate3d(-50%, -100%, 0);
}
.pop--show.pop--top .pop__container {
    transform: translate3d(-50%, 0, 0);
}

/*button*/
.zan-btn {
    position: relative;
    color: #333;
    background-color: #fff;
    padding-left: 15px;
    padding-right: 15px;
    border-radius: 2px;
    font-size: 16px;
    line-height: 45px;
    height: 45px;
    box-sizing: border-box;
    text-decoration: none;
    text-align: center;
    vertical-align: middle;
    overflow: visible;
}
.zan-btn--group {
    margin-bottom: 10px;
}
.zan-btn::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 200%;
    height: 200%;
    transform: scale(0.5);
    transform-origin: 0 0;
    pointer-events: none;
    box-sizing: border-box;
    border: 0 solid #e5e5e5;
    border-width: 1px;
    border-radius: 4px;
}
.zan-btn--primary {
    color: #fff;
    background-color: #4b0;
}
.zan-btn--primary::after {
    border-color: #0a0;
}
.zan-btn--warn {
    color: #fff;
    background-color: #f85;
}
.zan-btn--warn::after {
    border-color: #f85;
}
.zan-btn--danger {
    color: #fff;
    background-color: #f44;
}
.zan-btn--danger::after {
    border-color: #e33;
}
.zan-btn--small {
    display: inline-block;
    height: 30px;
    line-height: 30px;
    font-size: 12px;
}
.zan-btn--small.zan-btn--group {
    margin-bottom: 0;
    margin-right: 5px;
}
.zan-btn--mini {
    display: inline-block;
    line-height: 21px;
    height: 22px;
    font-size: 10px;
    padding-left: 5px;
    padding-right: 5px;
}
.zan-btn--mini.zan-btn--group {
    margin-bottom: 0;
    margin-right: 5px;
}
.zan-btn--large {
    border-radius: 0;
    border: none;
    line-height: 50px;
    height: 50px;
}
.zan-btn--large.zan-btn--group {
    margin-bottom: 0;
}
.zan-btn--plain.zan-btn {
    background-color: transparent;
}
.zan-btn--plain.zan-btn--primary {
    color: #06bf04;
}
.zan-btn--plain.zan-btn--warn {
    color: #f60;
}
.zan-btn--plain.zan-btn--danger {
    color: #f44;
}
.button-hover {
    opacity: 0.9;
}
.zan-btn--loading {
    color: transparent;
    opacity: 1;
}
.zan-btn--loading::before {
    position: absolute;
    left: 50%;
    top: 50%;
    content: ' ';
    width: 16px;
    height: 16px;
    margin-left: -8px;
    margin-top: -8px;
    border: 3px solid #e5e5e5;
    border-color: #666 #e5e5e5 #e5e5e5 #e5e5e5;
    border-radius: 8px;
    box-sizing: border-box;
    animation: btn-spin 0.6s linear;
    animation-iteration-count: infinite;
}
.zan-btn--danger.zan-btn--loading::before,
.zan-btn--primary.zan-btn--loading::before,
.zan-btn--warn.zan-btn--loading::before {
    border-color: #fff rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1);
}
@keyframes btn-spin {
    0% {
        transform: rotate(0);
    }
    100% {
        transform: rotate(360deg);
    }
}
.zan-btn.zan-btn--disabled {
    color: #999 !important;
    background: #f8f8f8 !important;
    border-color: #e5e5e5 !important;
    cursor: not-allowed !important;
    opacity: 1 !important;
}
.zan-btn.zan-btn--disabled::after {
    border-color: #e5e5e5 !important;
}
.zan-btn--group.zan-btn--last {
    margin-bottom: 0;
    margin-right: 0;
}

/*dialog*/
.zan-dialog--container {
    width: 80vw;
    font-size: 16px;
    overflow: hidden;
    border-radius: 4px;
    background-color: #fff;
    color: #333;
}
.zan-dialog__header {
    padding: 15px 0 0;
    text-align: center;
}
.zan-dialog__content {
    position: relative;
    padding: 15px 20px;
    line-height: 1.5;
    min-height: 40px;
}
.zan-dialog__content::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 200%;
    height: 200%;
    transform: scale(0.5);
    transform-origin: 0 0;
    pointer-events: none;
    box-sizing: border-box;
    border: 0 solid #e5e5e5;
    border-bottom-width: 1px;
}
.zan-dialog__content--title {
    color: #999;
    font-size: 14px;
}
.zan-dialog__footer {
    overflow: hidden;
}
.zan-dialog__button {
    flex: 1;
}
.zan-dialog__button-inside,
.zan-dialog__button-inside--first {
    margin-bottom: 0;
    line-height: 50px;
    height: 50px;
}
.zan-dialog__button-inside--first::after,
.zan-dialog__button-inside::after {
    border-width: 0;
    border-radius: 0;
}
.zan-dialog__footer--horizon {
    display: flex;
}
.zan-dialog__footer--horizon .zan-dialog__button-inside::after {
    border-left-width: 1px;
}
.zan-dialog__footer--vertical .zan-dialog__button-inside::after {
    border-top-width: 1px;
}
</style>

<script>
import wepy from 'wepy'
export default class Button extends wepy.component {
    props = {
        show: {
            type: Boolean,
            default: false
        },
        message: {
            type: String,
            default: "这是一个拟态框"
        },
        buttons: {
            type: Array,
            default: []
        },
        buttonsShowVertical: {
            type: Boolean,
            default: false
        },
        showCancelButton: {
            type: Boolean,
            default: false
        },
        handleMaskClick: {
            type: Function,
            default: () => {}
        },
        handleButtinClick: {
            type: Function,
            default: () => {}
        }
    }

    methods = {
        onButtonClick: event => {
            this.handleButtinClick(event)
        },
        onMaskClick: event => {
            this.handleMaskClick(event)
        }
    }
}
</script>
