<template>
    <view class="zan-cell zan-field {{ error ? 'zan-field--error' : '' }} {{ mode === 'wrapped' ? 'zan-field--wrapped' : '' }}">
        <view wx:if="{{ title }}" class="zan-cell__hd zan-field__title">
            {{ title }}
        </view>
        <textarea wx:if="{{ type === 'textarea' }}" auto-height disabled="{{ disabled }}" focus="{{ focus }}" value="{{ value }}" placeholder="{{ placeholder }}" maxlength="{{ maxlength }}" class="zan-field__input zan-cell__bd {{ right ? 'zan-field__input--right' : '' }}" placeholder-class="zan-field__placeholder" bindinput="handleFieldChange" bindfocus="handleFieldFocus" bindblur="handleFieldBlur"></textarea>
        <input wx:else type="{{ inputType || 'text' }}" disabled="{{ disabled }}" focus="{{ focus }}" value="{{ value }}" placeholder="{{ placeholder }}" maxlength="{{ maxlength }}" class="zan-field__input zan-cell__bd {{ right ? 'zan-field__input--right' : '' }}" placeholder-class="zan-field__placeholder" bindinput="onFieldChange" bindfocus="onFieldFocus" bindblur="onFieldBlur" />
    </view>
</template>

<style scoped>
.zan-cell {
    position: relative;
    padding: 12px 15px;
    display: flex;
    align-items: center;
    line-height: 1.4;
    font-size: 14px;
}
.zan-cell::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 200%;
    height: 200%;
    transform: scale(0.5);
    transform-origin: 0 0;
    pointer-events: none;
    box-sizing: border-box;
    border: 0 solid #e5e5e5;
    border-bottom-width: 1px;
    left: 15px;
    right: 0;
}
.zan-cell .zan-cell__icon {
    margin-right: 5px;
}
.zan-cell .zan-cell__icon:empty {
    display: none;
}
.zan-cell__bd {
    flex: 1;
}
.zan-cell__text {
    line-height: 24px;
    font-size: 14px;
}
.zan-cell__desc {
    line-height: 1.2;
    font-size: 12px;
    color: #666;
}
.zan-cell__ft {
    position: relative;
    text-align: right;
    color: #666;
}
.zan-cell__no-pading {
    padding: 0;
}
.zan-cell__no-pading .zan-cell__bd_padding {
    padding: 12px 0 12px 15px;
}
.zan-cell__no-pading .zan-cell__bd_padding .zan-form__input {
    height: 26px;
}
.zan-cell__no-pading .zan-cell__ft_padding {
    padding: 12px 15px 12px 0;
}
.zan-cell.last-cell::after {
    display: none;
}
.zan-cell--access .zan-cell__ft {
    padding-right: 13px;
}
.zan-cell--access .zan-cell__ft::after {
    position: absolute;
    top: 50%;
    right: 2px;
    content: ' ';
    display: inline-block;
    height: 6px;
    width: 6px;
    border-width: 2px 2px 0 0;
    border-color: #c8c8c8;
    border-style: solid;
    transform: translateY(-50%) matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
}
.zan-cell--switch {
    padding-top: 6px;
    padding-bottom: 6px;
}
.zan-field {
    padding: 7px 15px;
    color: #333;
}
.zan-field--wrapped {
    margin: 10px 15px;
    background-color: #fff;
}
.zan-field--wrapped::after {
    left: 0;
    border-width: 1px;
    border-radius: 4px;
}
.zan-field.zan-field--wrapped::after {
    display: block;
}
.zan-field--error {
    color: #f40;
}
.zan-field--wrapped.zan-field--error::after {
    border-color: #f40;
}
.zan-field__title {
    color: #333;
    min-width: 65px;
    padding-right: 10px;
}
.zan-field__input {
    flex: 1;
    line-height: 1.6;
    padding: 4px 0;
    min-height: 22px;
    height: auto;
    font-size: 14px;
}
.zan-field__placeholder {
    font-size: 14px;
}
.zan-field__input--right {
    text-align: right;
}
</style>

<script>
import wepy from 'wepy'
export default class Filed extends wepy.component {
    props = {
        error: {
            type: Boolean,
            default: false
        },
        mode: {
            type: String,
            default: ""
        },
        title: {
            type: String,
            default: ""
        },
        type: {
            type: String,
            default: ""
        },
        inputType: {
            type: String,
            default: ""
        },
        disabled: {
            type: Boolean,
            default: false
        },
        focus: {
            type: Boolean,
            default: false
        },
        value: {
            type: String,
            default: ""
        },
        placeholder: String,
        maxlength: {
            type: Number,
            default: 100
        },
        right: Boolean,
        handleFieldBlur: {
            type: Function,
            default: () => {}
        },
        handleFieldChange: {
            type: Function,
            default: () => {}
        },
        handleFieldFocus: {
            type: Function,
            default: () => {}
        }
    }

    methods = {
        onFieldBlur: (event) => {
            if (this.handleFieldBlur) {
                this.handleFieldBlur(event)
            }
        },
        onFieldChange: (event) => {
            if (this.handleFieldChange) {
                this.handleFieldChange(event)
            }
        },
        onFieldFocus: (event) => {
            if (this.handleFieldFocus) {
                this.handleFieldFocus(event)
            }
        }
    }
}
</script>
